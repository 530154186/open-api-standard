swagger: '2.0'

info:
  title : Parties schema with custom fields model
  description : This sample showcases a single level custom fields model
  version: 1.0.0

schemes:
  - https

securityDefinitions:
  Oauth2:
    type: oauth2
    description: Oauth 2.0 authentication
    tokenUrl: 'https://any.local.keycloak:8443/login/v1/sandbox/auth'
    flow: application
security:
  - Oauth2: []

paths:
  /parties/{partyId}:
    get:
      summary: Get party details with bank specific custom fields.
      description: Returns a complete view of a party including bank specific custom-fields.
      operationId: get-parties-partyId
      parameters:
        - $ref: '#/parameters/partyId'
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/party'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '404':
          description: A party with the given partyId does not exist.
          schema:
            $ref: '#/definitions/Error'
        '500':
          $ref: '#/responses/500'
  /parties:
    post:
      summary: Create party with Bank specific custom-fields.
      description: Creates a party including bank specific custom-fields.
      operationId: post-parties
      parameters:
        - $ref: '#/parameters/createParty' 
      responses:
        '200':
          description: Successful Response
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '500':
          $ref: '#/responses/500'
  /parties/custom-fields-schemas:
    get:
      summary: Get party custom fields schema.
      description: Returns the schema of the party custom fields specification.
      operationId: get-parties-schema
      responses:
        '200':
          description: Successful Response
          schema:
            $ref: '#/definitions/customSchema'
        '400':
          $ref: '#/responses/400'
        '401':
          $ref: '#/responses/401'
        '500':
          $ref: '#/responses/500'
parameters:
  partyId:
    name: partyId
    in: path
    required: true
    type: string
    description: UUID of the party

  createParty:
    name: createParty
    in : body
    description: Party
    schema:
      $ref: '#/definitions/party'


responses:
  '400':
    description: Bad Request
    schema:
      $ref: '#/definitions/Error'

  '401':
    description: 'Access forbidden, invalid Authorization was used.'
    schema:
      $ref: '#/definitions/Error'

  '500':
    description: 'Access forbidden, invalid Authorization was used.'
    schema:
      $ref: '#/definitions/Error'

definitions:
  Error:
    title: Error details
    type: object
    properties:
      type:
        type: string
        maxLength: 500
        description: 'A URI reference [RFC3986] that identifies the problem type.'
        example: 'https://api.finastra.com/validation-error'
      title:
        type: string
        maxLength: 500
        description: A short summary of the problem type.
        example: Your request parameters didn't validate.
      status:
        type: integer
        format: int32
        description: 'The HTTP status code. For example,[RFC7231], Section 6.'
        example: 400
      detail:
        type: string
        maxLength: 500
        description: The details that define the source of the problem.
    description: This general error structure is used throughout the common service APIs that comply with RFC7807. Note that unrecognized parameters must be ignored.
    
  party:
    description: Party
    type: object
    required:
    - lastName

    properties:
      partyId:
        type: string
        description: UUID of the party
        readOnly: true

      lastName:
        type: string
        description: Surname
        example: Skywalker

      firstName:
        type: string
        description: First name
        example: Luke 
  
      custom-fields:
        type: object
        description : Custom fields defined by the financial institution. The schema and
                      documentation can be found using the associated meta data endpoint
        additionalProperties:
          type: object
          example: { "contact" : { "email" : "luke.skywalker@star.com" , "phone_number": "911"}}
  
  customSchema:
    type: object
    description:  Ths defines the schema of the custom fields that will be returned to the client. The definition is a subset of json schema. Extra properties can be included as required e.g. format, minLength, pattern, etc. In this sample the custom field type is mandatory and the maxLength is included. The example shows how this structure is used 
    required: 
      - type
    properties:
      $schema:
        description: Describes which  dialect of JSON Schema this schema was written for - see JSON schema documentation for further details. 
        type: string
      $id:
        description: Used to identify the schema - see JSON schema documentation for further details
        type: string
      type:
        type: string
        description: Defines the type of available fields. Extra field types can be added as required e.g. integer
        enum:
          - object
          - string
          - number      
      description:
        description: Provides a description of the custom fields schema
        type: string
      required:
        description:  Used to state that the custom fields support the 'required' keyword 
        type: array
        items:
          type: string
      maxLength : 
        description:  Used to state that the custom fields support the 'maxLength' keyword
        type : integer
      properties:
        description:  Used to define the custom fields. It has a recursive definition. Note that some fields like $schema should only be used at the top level and not at field level     
        type: object
        additionalProperties:
          $ref: '#/definitions/customSchema'

    example: 
            {
              "$schema": "http://json-schema.org/draft-07/schema",
              "$id": "http://example.com/example.json",
              "type": "object",
              "title": "Bank A customized party schema",
              "properties": {
                "contact": {
                  "$id": "#/properties/custom-fields/contact",
                  "type": "object",
                  "title": "Contact custom field",
                  "description": "Party contact details.",
                  "required": [
                    "email"
                  ],
                  "properties": {
                    "email": {
                      "$id": "#/properties/custom-fields/contact/email",
                      "type": "string",
                      "title": "Email custom field",
                      "description": "Party email address."
                    },
                    "phone_number": {
                      "$id": "#/properties/custom-fields/contact/phone_number",
                      "type": "string",
                      "title": "Phone number custom field",
                      "description": "Party phone number.",
                      "maxLength": 12
                    }
                  }
                }
              }
            }
